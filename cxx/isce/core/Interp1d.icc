#include <isce/math/ComplexMultiply.h>

namespace isce { namespace core {

template<typename TK, typename TD>
TD interp1d(const Kernel<TK>& kernel, const TD* x, size_t length, size_t stride,
            double t, bool periodic)
{
    using namespace isce::math::complex_multiply;
    int _width = int(ceil(kernel.width()));
    long i0 = 0;
    if (_width % 2 == 0) {
        i0 = (long) ceil(t);
    } else {
        i0 = (long) round(t);
    }
    long low = i0 - _width / 2; // integer division implicit floor()
    long high = low + _width;
    typename std::common_type<TD, TK>::type sum = 0;
    if (!periodic && ((low < 0) || (high >= length))) {
        // XXX log/throw error?
        return sum;
    }
    for (long i = low; i < high; i++) {
        long j = i;
        if (periodic) {
            j = i % length;
        }
        double ti = i - t;
        TK w = kernel(ti);
        sum += w * x[j * stride];
    }
    return sum;
}

template<typename TK, typename TD>
TD interp1d(const Kernel<TK>& kernel, const std::valarray<TD>& x, double t,
            bool periodic)
{
    return interp1d(kernel, &x[0], x.size(), 1, t, periodic);
}

}} // namespace isce::core
