#ifndef ISCE_FFT_FFTPLAN_ICC
#error "FFTPlan.icc is an implementation detail of FFTPlan.h"
#endif

namespace isce { namespace fft {

template<typename T>
FwdFFTPlan<T>::FwdFFTPlan(std::complex<T> * out, T * in, int n, int batch, unsigned flags)
:
    super_t(out, in, &n, &n, 1, n, &n, 1, n, batch, flags, 1, FFTW_FORWARD)
{}

template<typename T>
template<int Rank>
FwdFFTPlan<T>::FwdFFTPlan(std::complex<T> * out,
                          T * in,
                          const int (&n)[Rank],
                          int batch,
                          unsigned flags)
:
    super_t(out, in, n, n, 1, detail::product(n), n, 1, detail::product(n), batch, flags, Rank, FFTW_FORWARD)
{}

template<typename T>
FwdFFTPlan<T>::FwdFFTPlan(std::complex<T> * out,
                          T * in,
                          int n,
                          int nembed,
                          int stride,
                          int dist,
                          int batch,
                          unsigned flags)
:
    super_t(out, in, &n, &nembed, stride, dist, &nembed, stride, dist, batch, flags, 1, FFTW_FORWARD)
{}

template<typename T>
template<int Rank>
FwdFFTPlan<T>::FwdFFTPlan(std::complex<T> * out,
                          T * in,
                          const int (&n)[Rank],
                          const int (&nembed)[Rank],
                          int stride,
                          int dist,
                          int batch,
                          unsigned flags)
:
    super_t(out, in, n, nembed, stride, dist, nembed, stride, dist, batch, flags, Rank, FFTW_FORWARD)
{}

template<typename T>
FwdFFTPlan<T>::FwdFFTPlan(std::complex<T> * out,
                          T * in,
                          int n,
                          int inembed,
                          int istride,
                          int idist,
                          int onembed,
                          int ostride,
                          int odist,
                          int batch,
                          unsigned flags)
:
    super_t(out, in, &n, &inembed, istride, idist, &onembed, ostride, odist, batch, flags, 1, FFTW_FORWARD)
{}

template<typename T>
template<int Rank>
FwdFFTPlan<T>::FwdFFTPlan(std::complex<T> * out,
                          T * in,
                          const int (&n)[Rank],
                          const int (&inembed)[Rank],
                          int istride,
                          int idist,
                          const int (&onembed)[Rank],
                          int ostride,
                          int odist,
                          int batch,
                          unsigned flags)
:
    super_t(out, in, n, inembed, istride, idist, onembed, ostride, odist, batch, flags, Rank, FFTW_FORWARD)
{}

template<typename T>
InvFFTPlan<T>::InvFFTPlan(T * out, std::complex<T> * in, int n, int batch, unsigned flags)
:
    super_t(out, in, &n, &n, 1, n, &n, 1, n, batch, flags, 1, FFTW_BACKWARD)
{}

template<typename T>
template<int Rank>
InvFFTPlan<T>::InvFFTPlan(T * out,
                          std::complex<T> * in,
                          const int (&n)[Rank],
                          int batch,
                          unsigned flags)
:
    super_t(out, in, n, n, 1, detail::product(n), n, 1, detail::product(n), batch, flags, Rank, FFTW_BACKWARD)
{}

template<typename T>
InvFFTPlan<T>::InvFFTPlan(T * out,
                          std::complex<T> * in,
                          int n,
                          int nembed,
                          int stride,
                          int dist,
                          int batch,
                          unsigned flags)
:
    super_t(out, in, &n, &nembed, stride, dist, &nembed, stride, dist, batch, flags, 1, FFTW_BACKWARD)
{}

template<typename T>
template<int Rank>
InvFFTPlan<T>::InvFFTPlan(T * out,
                          std::complex<T> * in,
                          const int (&n)[Rank],
                          const int (&nembed)[Rank],
                          int stride,
                          int dist,
                          int batch,
                          unsigned flags)
:
    super_t(out, in, n, nembed, stride, dist, nembed, stride, dist, batch, flags, Rank, FFTW_BACKWARD)
{}

template<typename T>
InvFFTPlan<T>::InvFFTPlan(T * out,
                          std::complex<T> * in,
                          int n,
                          int inembed,
                          int istride,
                          int idist,
                          int onembed,
                          int ostride,
                          int odist,
                          int batch,
                          unsigned flags)
:
    super_t(out, in, &n, &inembed, istride, idist, &onembed, ostride, odist, batch, flags, 1, FFTW_BACKWARD)
{}

template<typename T>
template<int Rank>
InvFFTPlan<T>::InvFFTPlan(T * out,
                          std::complex<T> * in,
                          const int (&n)[Rank],
                          const int (&inembed)[Rank],
                          int istride,
                          int idist,
                          const int (&onembed)[Rank],
                          int ostride,
                          int odist,
                          int batch,
                          unsigned flags)
:
    super_t(out, in, n, inembed, istride, idist, onembed, ostride, odist, batch, flags, Rank, FFTW_BACKWARD)
{}

}}
