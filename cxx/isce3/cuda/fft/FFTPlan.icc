#ifndef ISCE_CUDA_FFT_FFTPLAN_ICC
#error "FFTPlan.icc is an implementation detail of FFTPlan.h"
#endif

namespace isce3 { namespace cuda { namespace fft {

template<typename T>
FwdFFTPlan<T>::FwdFFTPlan(thrust::complex<T> * out, T * in, int n, int batch)
:
    super_t(out, in, &n, &n, 1, n, &n, 1, n, batch, 1, detail::CufftR2CType<T>::type)
{}

template<typename T>
template<int Rank>
FwdFFTPlan<T>::FwdFFTPlan(thrust::complex<T> * out,
                          T * in,
                          const int (&n)[Rank],
                          int batch)
:
    super_t(out, in, n, n, 1, detail::product(n), n, 1, detail::product(n), batch, Rank, detail::CufftR2CType<T>::type)
{
    static_assert( Rank <= 3, "" );
}

template<typename T>
FwdFFTPlan<T>::FwdFFTPlan(thrust::complex<T> * out,
                          T * in,
                          int n,
                          int nembed,
                          int stride,
                          int dist,
                          int batch)
:
    super_t(out, in, &n, &nembed, stride, dist, &nembed, stride, dist, batch, 1, detail::CufftR2CType<T>::type)
{}

template<typename T>
template<int Rank>
FwdFFTPlan<T>::FwdFFTPlan(thrust::complex<T> * out,
                          T * in,
                          const int (&n)[Rank],
                          const int (&nembed)[Rank],
                          int stride,
                          int dist,
                          int batch)
:
    super_t(out, in, n, nembed, stride, dist, nembed, stride, dist, batch, Rank, detail::CufftR2CType<T>::type)
{
    static_assert( Rank <= 3, "" );
}

template<typename T>
FwdFFTPlan<T>::FwdFFTPlan(thrust::complex<T> * out,
                          T * in,
                          int n,
                          int inembed,
                          int istride,
                          int idist,
                          int onembed,
                          int ostride,
                          int odist,
                          int batch)
:
    super_t(out, in, &n, &inembed, istride, idist, &onembed, ostride, odist, batch, 1, detail::CufftR2CType<T>::type)
{}

template<typename T>
template<int Rank>
FwdFFTPlan<T>::FwdFFTPlan(thrust::complex<T> * out,
                          T * in,
                          const int (&n)[Rank],
                          const int (&inembed)[Rank],
                          int istride,
                          int idist,
                          const int (&onembed)[Rank],
                          int ostride,
                          int odist,
                          int batch)
:
    super_t(out, in, n, inembed, istride, idist, onembed, ostride, odist, batch, Rank, detail::CufftR2CType<T>::type)
{
    static_assert( Rank <= 3, "" );
}

template<typename T>
InvFFTPlan<T>::InvFFTPlan(T * out, thrust::complex<T> * in, int n, int batch)
:
    super_t(out, in, &n, &n, 1, n, &n, 1, n, batch, 1, detail::CufftC2RType<T>::type)
{}

template<typename T>
template<int Rank>
InvFFTPlan<T>::InvFFTPlan(T * out,
                          thrust::complex<T> * in,
                          const int (&n)[Rank],
                          int batch)
:
    super_t(out, in, n, n, 1, detail::product(n), n, 1, detail::product(n), batch, Rank, detail::CufftC2RType<T>::type)
{
    static_assert( Rank <= 3, "" );
}

template<typename T>
InvFFTPlan<T>::InvFFTPlan(T * out,
                          thrust::complex<T> * in,
                          int n,
                          int nembed,
                          int stride,
                          int dist,
                          int batch)
:
    super_t(out, in, &n, &nembed, stride, dist, &nembed, stride, dist, batch, 1, detail::CufftC2RType<T>::type)
{}

template<typename T>
template<int Rank>
InvFFTPlan<T>::InvFFTPlan(T * out,
                          thrust::complex<T> * in,
                          const int (&n)[Rank],
                          const int (&nembed)[Rank],
                          int stride,
                          int dist,
                          int batch)
:
    super_t(out, in, n, nembed, stride, dist, nembed, stride, dist, batch, Rank, detail::CufftC2RType<T>::type)
{
    static_assert( Rank <= 3, "" );
}

template<typename T>
InvFFTPlan<T>::InvFFTPlan(T * out,
                          thrust::complex<T> * in,
                          int n,
                          int inembed,
                          int istride,
                          int idist,
                          int onembed,
                          int ostride,
                          int odist,
                          int batch)
:
    super_t(out, in, &n, &inembed, istride, idist, &onembed, ostride, odist, batch, 1, detail::CufftC2RType<T>::type)
{}

template<typename T>
template<int Rank>
InvFFTPlan<T>::InvFFTPlan(T * out,
                          thrust::complex<T> * in,
                          const int (&n)[Rank],
                          const int (&inembed)[Rank],
                          int istride,
                          int idist,
                          const int (&onembed)[Rank],
                          int ostride,
                          int odist,
                          int batch)
:
    super_t(out, in, n, inembed, istride, idist, onembed, ostride, odist, batch, Rank, detail::CufftC2RType<T>::type)
{}

}}}
