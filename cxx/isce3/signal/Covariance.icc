//-*- C++ -*-
//-*- coding: utf-8 -*-
//
// Author: Heresh Fattahi
// Copyright 2019-

#if !defined(ISCE_SIGNAL_COVARIANCE_ICC)
#error "Covariance.icc is an implementation detail of class Covariance"
#endif

#include <isce3/core/Interpolator.h>
#include <isce3/core/Projections.h>

template<class T>
inline isce3::signal::Covariance<T>::~Covariance()
{
    if (_interp) {
        delete _interp;
    }
    if (_proj) {
        delete _proj;
    }
}

template<class T>
inline void
isce3::signal::Covariance<T>::geoGrid(double geoGridStartX, double geoGridStartY,
                                     double geoGridSpacingX,
                                     double geoGridSpacingY, double geoGridEndX,
                                     double geoGridEndY, int epsgcode)
{
    int length = 1 + (geoGridEndY - geoGridStartY) / geoGridSpacingY;

    int width = 1 + (geoGridEndX - geoGridStartX) / geoGridSpacingX;

    geoGrid(geoGridStartX, geoGridStartY, geoGridSpacingX, geoGridSpacingY,
            width, length, epsgcode);
}

template<class T>
inline void isce3::signal::Covariance<T>::geoGrid(
        double geoGridStartX, double geoGridStartY, double geoGridSpacingX,
        double geoGridSpacingY, int width, int length, int epsgcode)
{
    // populate the geoTransform
    // Assumption: origin is the top-left corner of the top-left pixel of the
    // grid
    _geoTrans = new double[6];
    _geoTrans[0] = geoGridStartX;
    _geoTrans[1] = geoGridSpacingX;
    _geoTrans[2] = 0.0;
    _geoTrans[3] = geoGridStartY;
    _geoTrans[4] = 0.0;
    _geoTrans[5] = geoGridSpacingY;

    // the starting coordinate of the output geocoded grid in X direction.
    // Since the input is alwayas referring to the top-left corner of the
    // top-left pixel, we adjust to the center for internal use only
    _geoGridStartX = geoGridStartX + geoGridSpacingX / 2;

    // the starting coordinate of the output geocoded grid in Y direction.
    // adjusted to the center of the pixel for internal use only
    _geoGridStartY = geoGridStartY + geoGridSpacingY / 2;

    // spacing of the output geocoded grid in X
    _geoGridSpacingX = geoGridSpacingX;

    // spacing of the output geocoded grid in Y
    _geoGridSpacingY = geoGridSpacingY;

    // number of lines (rows) in the geocoded grid (Y direction)
    _geoGridLength = length;

    // number of columns in the geocoded grid (Y direction)
    _geoGridWidth = width;

    // Save the EPSG code
    _epsgOut = epsgcode;

    // Initialize the projection
    _proj = isce3::core::createProj(epsgcode);
}

template<class T>
inline void isce3::signal::Covariance<T>::radarGrid(
        isce3::core::LUT2d<double> doppler, isce3::core::DateTime refEpoch,
        double azimuthStartTime, double azimuthTimeInterval,
        int radarGridLength, double startingRange, double rangeSpacing,
        isce3::core::LookSide side, double wavelength, int radarGridWidth)
{
    _doppler = doppler;
    _radarGrid = isce3::product::RadarGridParameters(
            azimuthStartTime, wavelength, 1.0 / azimuthTimeInterval,
            startingRange, rangeSpacing, side, radarGridLength, radarGridWidth,
            refEpoch);
}

template<class T>
inline void
isce3::signal::Covariance<T>::rangeSamplingFrequency(double rngSamplingFreq)
{
    _rangeSamplingFrequency = rngSamplingFreq;
}

template<class T>
inline void
isce3::signal::Covariance<T>::interpolator(isce3::core::dataInterpMethod method)
{
    _interp = isce3::core::createInterpolator<T>(method);
}
