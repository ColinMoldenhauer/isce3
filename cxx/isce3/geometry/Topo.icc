//-*- C++ -*-
//-*- coding: utf-8 -*-
//
// Author: Bryan V. Riel
// Copyright 2017-2018

#if !defined(ISCE_GEOMETRY_TOPO_ICC)
#error "Topo.icc is an implementation detail of class Topo"
#endif

#include <isce3/core/Projections.h>

inline
isce3::geometry::Topo::
Topo(const isce3::product::RadarGridParameters & radarGrid,
     const isce3::core::Orbit & orbit,
     const isce3::core::Ellipsoid & ellipsoid,
     const isce3::core::LUT2d<double> & doppler)
:
    _orbit(orbit),
    _ellipsoid(ellipsoid),
    _doppler(doppler),
    _radarGrid(radarGrid)
{

    // Adjust block length based on input length of the radarGrid
    _linesPerBlock = std::min(_radarGrid.length(), _linesPerBlock);
}

inline
isce3::geometry::Topo::
Topo(const isce3::core::Ellipsoid & ellipsoid, const isce3::core::Orbit & orbit,
     const isce3::core::LUT2d<double> & doppler, const isce3::core::Metadata & meta)
:
    _orbit(orbit),
    _ellipsoid(ellipsoid),
    _doppler(doppler),
    _radarGrid(meta, orbit.referenceEpoch())
{
    // Adjust block length based in input SLC length
    _linesPerBlock = std::min(_radarGrid.length(), _linesPerBlock);
}

inline
void isce3::geometry::Topo::
demMethod(isce3::core::dataInterpMethod method)
{
    // Check validity
    if ((method != isce3::core::SINC_METHOD) && (method != isce3::core::BILINEAR_METHOD) &&
        (method != isce3::core::BICUBIC_METHOD) && (method != isce3::core::NEAREST_METHOD) &&
        (method != isce3::core::BIQUINTIC_METHOD)) {
        pyre::journal::error_t error("isce.geometry.Topo");
        error
            << pyre::journal::at(__HERE__)
            << "Error in Topo::demMethod - Unsupported DEM interpolation method"
            << pyre::journal::endl;
    }

    // Save
    _demMethod = method;
}

inline
void isce3::geometry::Topo::
epsgOut(int epsgcode)
{
    // Save the code
    _epsgOut = epsgcode;
    // Initialize the projection
    _proj = isce3::core::createProj(epsgcode);
}

// end of file
