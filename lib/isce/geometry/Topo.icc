//-*- C++ -*-
//-*- coding: utf-8 -*-
//
// Author: Bryan V. Riel
// Copyright 2017-2018

#if !defined(ISCE_GEOMETRY_TOPO_ICC)
#error "Topo.icc is an implementation detail of class Topo"
#endif

#include <isce/core/Projections.h>

inline
isce::geometry::Topo::
Topo(const isce::product::Product & product,
     char frequency,
     bool nativeDoppler,
     size_t numberAzimuthLooks,
     size_t numberRangeLooks)
:
    _radarGrid(product, frequency, numberAzimuthLooks, numberRangeLooks)
{
    // Copy orbit and doppler
    _orbit = product.metadata().orbit();
    if (nativeDoppler) {
        _doppler = product.metadata().procInfo().dopplerCentroid(frequency);
    }

    // Make an ellipsoid manually
    _ellipsoid = isce::core::Ellipsoid(isce::core::EarthSemiMajorAxis,
                                       isce::core::EarthEccentricitySquared);
    _lookSide = product.lookSide();

    // Adjust block length based in input SLC length
    _linesPerBlock = std::min(_radarGrid.length(), _linesPerBlock);
}

inline
isce::geometry::Topo::
Topo(const isce::product::RadarGridParameters & radarGrid,
     const isce::core::Orbit & orbit,
     const isce::core::Ellipsoid & ellipsoid,
     const isce::core::LUT2d<double> & doppler)
:
    _orbit(orbit),
    _ellipsoid(ellipsoid),
    _doppler(doppler),
    _radarGrid(radarGrid)
{
    // Other data
    _lookSide = radarGrid.lookSide();

    // Adjust block length based on input length of the radarGrid
    _linesPerBlock = std::min(_radarGrid.length(), _linesPerBlock);
}

inline
isce::geometry::Topo::
Topo(const isce::core::Ellipsoid & ellipsoid, const isce::core::Orbit & orbit,
     const isce::core::LUT2d<double> & doppler, const isce::core::Metadata & meta,
     size_t numberAzimuthLooks, size_t numberRangeLooks)
:
    _orbit(orbit),
    _ellipsoid(ellipsoid),
    _doppler(doppler),
    _radarGrid(meta, orbit.refEpoch, numberAzimuthLooks, numberRangeLooks)
{
    // Other data
    _lookSide = meta.lookSide;

    // Adjust block length based in input SLC length
    _linesPerBlock = std::min(_radarGrid.length(), _linesPerBlock);
}

inline
void isce::geometry::Topo::
orbitMethod(isce::core::orbitInterpMethod method)
{
    // Check validity
    if (method == isce::core::HERMITE_METHOD) {
        if (_orbit.nVectors < 4) {
            pyre::journal::error_t error("isce.geometry.Topo");
            error
                << pyre::journal::at(__HERE__)
                << "Error in Topo::orbitMethod - Need at least 4 state vectors for using "
                << "hermite polynomial interpolation."
                << pyre::journal::endl;
        }
    } else if (method == isce::core::SCH_METHOD) {
        if (_orbit.nVectors < 4) {
            pyre::journal::error_t error("isce.geometry.Topo");
            error
                << pyre::journal::at(__HERE__)
                << "Error in Topo::orbitMethod - Need at least 4 state vectors for using "
                << "SCH interpolation."
                << pyre::journal::endl;
        }
    } else if (method == isce::core::LEGENDRE_METHOD) {
        if (_orbit.nVectors < 9) {
            pyre::journal::error_t error("isce.geometry.Topo");
            error
                << pyre::journal::at(__HERE__)
                << "Error in Topo::orbitMethod - Need at least 9 state vectors for using "
                << "legendre polynomial interpolation."
                << pyre::journal::endl;
        }
    } else {
        pyre::journal::error_t error("isce.geometry.Topo");
        error
            << pyre::journal::at(__HERE__)
            << "Error in Topo::orbitMethod - Undefined orbit interpolation method."
            << pyre::journal::endl;
    }

    // Save
    _orbitMethod = method;
}

inline
void isce::geometry::Topo::
demMethod(isce::core::dataInterpMethod method)
{
    // Check validity
    if ((method != isce::core::SINC_METHOD) && (method != isce::core::BILINEAR_METHOD) &&
        (method != isce::core::BICUBIC_METHOD) && (method != isce::core::NEAREST_METHOD) &&
        (method != isce::core::BIQUINTIC_METHOD)) {
        pyre::journal::error_t error("isce.geometry.Topo");
        error
            << pyre::journal::at(__HERE__)
            << "Error in Topo::demMethod - Unsupported DEM interpolation method"
            << pyre::journal::endl;
    }

    // Save
    _demMethod = method;
}

inline
void isce::geometry::Topo::
epsgOut(int epsgcode)
{
    // Save the code
    _epsgOut = epsgcode;
    // Initialize the projection
    _proj = isce::core::createProj(epsgcode);
}

// end of file
