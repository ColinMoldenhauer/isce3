//-*- C++ -*-
//-*- coding: utf-8 -*-
//
// Author: Bryan V. Riel
// Copyright 2017-2018

#if !defined(ISCE_GEOMETRY_GEO2RDR_ICC)
#error "Geo2rdr.icc is an implementation detail of class Geo2rdr"
#endif

inline
isce::geometry::Geo2rdr::
Geo2rdr(const isce::product::Product & product,
        char frequency,
        bool nativeDoppler,
        size_t numberAzimuthLooks,
        size_t numberRangeLooks)
:
    _radarGrid(product, frequency, numberAzimuthLooks, numberRangeLooks)
{
    // Copy orbit and doppler
    _orbit = product.metadata().orbit();
    if (nativeDoppler) {
        _doppler = product.metadata().procInfo().dopplerCentroid(frequency);
    }

    // Make an ellipsoid manually
    _ellipsoid = isce::core::Ellipsoid(isce::core::EarthSemiMajorAxis,
                                       isce::core::EarthEccentricitySquared);
}

inline
isce::geometry::Geo2rdr::
Geo2rdr(const isce::core::Ellipsoid & ellipsoid,
        const isce::core::Orbit & orbit,
        const isce::core::LUT2d<double> & doppler,
        const isce::core::Metadata & meta,
        size_t numberAzimuthLooks,
        size_t numberRangeLooks)
:
    _ellipsoid(ellipsoid),
    _orbit(orbit),
    _doppler(doppler),
    _radarGrid(meta, orbit.refEpoch, numberAzimuthLooks, numberRangeLooks)
{}

inline
isce::geometry::Geo2rdr::
Geo2rdr(const isce::product::RadarGridParameters & radarGrid,
        const isce::core::Orbit & orbit,
        const isce::core::Ellipsoid & ellipsoid,
        const isce::core::LUT2d<double> & doppler)
:
    _ellipsoid(ellipsoid),
    _orbit(orbit),
    _doppler(doppler),
    _radarGrid(radarGrid)
{}

/** @param[in] method orbit interpolation method to use
 *
 * Set the orbit interpolation method while checking its validity*/
inline
void isce::geometry::Geo2rdr::
orbitMethod(isce::core::orbitInterpMethod method)
{
    // Check validity
    if (method == isce::core::HERMITE_METHOD) {
        if (_orbit.nVectors < 4) {
            pyre::journal::error_t error("isce.geometry.Geo2rdr");
            error
                << pyre::journal::at(__HERE__)
                << "Error in Geo2rdr::orbitMethod - Need at least 4 state vectors for using "
                << "hermite polynomial interpolation."
                << pyre::journal::endl;
        }
    } else if (method == isce::core::SCH_METHOD) {
        if (_orbit.nVectors < 4) {
            pyre::journal::error_t error("isce.geometry.Geo2rdr");
            error
                << pyre::journal::at(__HERE__)
                << "Error in Geo2rdr::orbitMethod - Need at least 4 state vectors for using "
                << "SCH interpolation."
                << pyre::journal::endl;
        }
    } else if (method == isce::core::LEGENDRE_METHOD) {
        if (_orbit.nVectors < 9) {
            pyre::journal::error_t error("isce.geometry.Geo2rdr");
            error
                << pyre::journal::at(__HERE__)
                << "Error in Geo2rdr::orbitMethod - Need at least 9 state vectors for using "
                << "legendre polynomial interpolation."
                << pyre::journal::endl;
        }
    } else {
        pyre::journal::error_t error("isce.geometry.Geo2rdr");
        error
            << pyre::journal::at(__HERE__)
            << "Error in Geo2rdr::orbitMethod - Undefined orbit interpolation method."
            << pyre::journal::endl;
    }

    // Save
    _orbitMethod = method;
}
