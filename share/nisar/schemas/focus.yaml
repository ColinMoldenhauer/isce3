# This is a Yamale schema (see https://github.com/23andMe/Yamale) for
# validating run config files for the NISAR RSLC PGE.
#
runconfig:
  name: str()
  groups:
    pge_name_group:
      pge_name: enum('RSLC_L_PGE')
    input_file_group:
      # REQUIRED List of NISAR raw data products in L0B format
      input_file_path: list(str(), min=1)

      # REQUIRED for QA. NOT REQUIRED if only running Product SAS.
      # If Product SAS and QA SAS are run back-to-back,
      # this field should be identical to `sas_output_file`.
      # Otherwise, this field is the filename of the single
      # NISAR product for QA to process.
      qa_input_file: str(required=False)

    ## The SAS will function without the following ancillary files but will produce
    ## products that do not meet all requirements.  These files are expected to
    ## be provided in routine processing.  The R1 SAS has not implemented any
    ## functionality using these files.  Implementation planned for R2.
    dynamic_ancillary_file_group:
      # Digital elevation model, optional.
      dem_file: str(required=False)
      # PLACEHOLDER - Digital elevation model file description, optional.
      dem_file_description: str(required=False)
      # Refined orbit, optional.
      # Defaults to orbit within L0B product.
      orbit: str(required=False)
      # Refined pointing, optional.
      # Defaults to attitude within L0B product.
      pointing: str(required=False)
      # External calibration data, optional.
      # Defaults to no extra calibration gain, phase, delay, etc.
      external_calibration: str(required=False)
      # Internal calibration tables, optional.
      # If not provided, no secondary elevation antenna pattern correction.
      internal_calibration: str(required=False)
      # Antenna pattern data, optional.
      # Defaults to sinc^4 pattern using nominal antenna dimensions.
      antenna_pattern: str(required=False)
      # Locations of the corner reflectors in the input product.
      # Only required if `absolute_radiometric_calibration` or
      # `point_target_analyzer` runconfig params are set to True for QA.
      corner_reflector_file: str(required=False)

    product_path_group:
      # Directory where PGE will place results
      product_path: str()
      # Directory where SAS can write temporary data
      scratch_path: str()
      # Intermediate file name.  SAS writes output product to the following file
      # before it gets renamed by the PGE wrapper.
      sas_output_file: str()
      sas_config_file: str()
      product_counter: int(min=1, max=999)

      # REQUIRED for QA. NOT REQUIRED if only running Product SAS.
      # Output directory to store all QA output files.
      # Defaults to './qa'
      qa_output_dir: str(required=False)

    primary_executable:
      product_type: str()
      product_version: str('^\d+\.\d+\.\d+$', required=False)
      composite_release_id: regex(r'\w\d\d\d\d\d', name='CRID')
      processing_type: enum('PR', 'UR') # production, urgent response
      mission_id: enum('NISAR')
      product_accuracy: enum('P', 'M', 'N', 'F', required=False)
      urgent_request_id: list(str(), required=False)
      processing_center: str(required=False)
      data_source: enum('A', 'M', required=False)
      partial_granule_id: str(required=False)
    debug_level_group:
      debug_switch: bool()
    geometry:
      cycle_number: int(min=1, max=999)
      relative_orbit_number: int(min=1, max=173)
      frame_number: int(min=1, max=176)
      orbit_direction: enum('Descending', 'Ascending')
      track_frame_polygon: str(required=False)
      full_coverage_threshold_percent: num(min=0.0, required=False)
    worker:
      # Whether or not to use GPU, optional. Defaults to True if available.
      gpu_enabled: bool(required=False)
      # Index of the GPU to use for processing, optional. Defaults to the
      # first available CUDA device. Ignored if *gpu_enabled* is False.
      gpu_id: int(min=0, required=False)

    processing:
      output_grid:
        # Azimuth bounds of output SLC.  Defaults to max fully-focused region.
        # Marked as required since NISAR PGE must populate start/end that align
        # with frame boundaries.
        start_time: timestamp()
        end_time: timestamp()

        # Range bounds of output SLC in meters, optional.
        # Defaults to entire fully focused swath.
        start_range: num(required=False)
        end_range: num(required=False)

        # Output grid azimuth sample rate in Hz, optional.
        # Defaults to input PRF.
        # NISAR PGE must set to 1520 Hz for RSLC product spec conformance.
        output_prf: num(min=0.0)

        # Interval for azimuth grid alignment in seconds. See docs.
        # Typically want 1 second and integer PRF (in Hz). Will not
        # override user-provided start_time.
        time_snap_interval: num(required=False)

      # Range spectral window, optional.  Defaults to no weighting.
      # NISAR PGE should set to {"kind": "Knab", "shape": 1.6} for RSLC product
      # spec conformance.
      range_window: include('spectral_window')

      # Azimuth spectral window, optional.  Defaults to no weighting.
      azimuth_window: include('spectral_window', required=False)

      radio_frequency_interference: include('rfi_options', required=False)

      # Range filter parameters for mixed-mode cases.
      range_common_band_filter:
        # Stop-band attenuation in dB.
        attenuation: num(min=0.0, required=False)
        # Transition width as a fraction of output bandwidth.
        width: num(min=0.0, max=1.0, required=False)

      doppler:
        # Offset between quaternion frame and antenna boresight in degrees.
        # TBD This will likely be parameter in a separate cal file.
        azimuth_boresight_deg: num(required=False)

        # How to interpolate between samples in the LUT.
        interp_method: enum('sinc', 'bilinear', 'bicubic', 'nearest', 'biquintic', required=False)

        # Postings for generated Doppler lookup table.
        spacing:
          # Lookup table range spacing in m
          range: num(min=0.0, required=False)
          # Lookup table Azimuth spacing in s
          azimuth: num(min=0.0, required=False)

        rdr2geo:
          # Slant range convergence threshold (m): float (default: 1e-8)
          threshold: num(min=0.0, required=False)
          # Max number of primary iterations: int (default: 25)
          maxiter: int(min=1, required=False)
          # Max number of secondary iterations: int (default: 15)
          extraiter: int(min=1, required=False)

      # Settings for range compression algorithm.
      rangecomp:
        # Convolution output mode: valid, full, or same (default: full)
        mode: enum('valid', 'full', 'same', required=False)

        # Range compression will always process the full pulse, so the
        # range dimension will be ignored.
        block_size:
          range: int(min=0, required=False)
          azimuth: int(min=1, required=False)

      # Settings for azimuth compression algorithm.
      azcomp:
        # Azimuth compression can be tiled arbitrarily, though
        # dimensions will affect runtime.
        block_size:
          range: int(min=0, required=False)
          azimuth: int(min=1, required=False)

        # Desired azimuth resolution in meters.
        azimuth_resolution: num(min=0.0, required=False)

        kernel:
          # Knab or NFFT
          type: enum('Knab', 'NFFT', required=False)
          # Length = 1+2*halfWidth
          halfwidth: num(min=0.0, required=False)
          # Transform padding ratio for NFFT method.
          approx_oversample: num(min=0.0, required=False)

          fit: enum('Cheby', 'Table', required=False)
          fit_order: int(min=1, required=False)

        rdr2geo:
          # Slant range convergence threshold (m): float (default: 1e-8)
          threshold: num(min=0.0, required=False)
          # Max number of primary iterations: int (default: 25)
          maxiter: int(min=1, required=False)
          # Max number of secondary iterations: int (default: 15)
          extraiter: int(min=1, required=False)

        geo2rdr:
          # Slant range convergence threshold (m): float (default: 1e-8)
          threshold: num(min=0.0, required=False)
          # Max number of iterations: int (default: 50)
          maxiter: int(min=1, required=False)
          # Step size for computing numerical gradient of Doppler (m): float
          # (default: 10.)
          delta_range: num(min=0.0, required=False)

      dry_troposphere_model: enum('nodelay', 'tsx', required=False)

      # Digital Elevation Model
      dem:
        # Height (in meters) to use if DEM file unavailable.
        reference_height: num(required=False)

        # How to interpolate the digital elevation model.  One of
        # nearest, bilinear, bicubic, biquintic, or sinc
        interp_method: enum('nearest', 'bilinear', 'bicubic', 'biquintic', 'sinc', required=False)

      # Nominal antenna dimensions to use for BLU, EAP, etc. when no
      # antenna pattern input file is provided or its contents are
      # unsuitable. Each dimension has units of meters and is assumed
      # 12.0 m if unspecified.
      nominal_antenna_size:
        range: num(min=0.0, required=False)
        azimuth: num(min=0.0, required=False)

      # Scale factor to apply to data before float16 encoding, optional.
      # Default is 1.0.
      # The largest representable float16 value is 65504.
      # NOTE This is ad-hoc until the processor is radiometrically calibrated.
      encoding_scale_factor: num(required=False)

      # Whether to delete scratch files.  Default is True.
      delete_tempfiles: bool(required=False)

      # Dump height layer to temp file for debug purposes.  Default=False
      debug_dump_height: bool(required=False)

      # Processing stage switches, mostly for debug.
      # Any missing stages assumed True
      is_enabled:
        # azimuth resampling and gap-filling
        presum_blu: bool(required=False)
        # range compression
        rangecomp: bool(required=False)
        # elevation antenna pattern correction
        eap: bool(required=False)
        # R^4 spreading loss correction
        range_cor: bool(required=False)
        # azimuth compression
        azcomp: bool(required=False)

    # The PGE wrapper uses the qa group to control whether or not to run the qa SAS
    # program and which qa option(s) to enable. By default the qa SAS is not run.
    qa: include('qa_options', required=False)
---
spectral_window:
  kind: enum('Kaiser', 'Cosine', required=False)
  # Shape parameter. For Kaiser, 0 <= shape < Inf.
  # For Cosine, 0 <= shape <= 1
  shape: num(min=0.0, required=False)

rfi_options:
  # Whether to attempt RFI detection and record related metadata.
  # Defaults to True
  detection_enabled: bool(required=False)
  # Whether to attemt RFI removal. Default to False.
  # Requires that RFI detection is also enabled.
  mitigation_enabled: bool(required=False)
  # Algorithm selection.  Defaults to 'ST-EVD' for slow-time eigenvalue
  # decomposition.
  mitigation_algorithm: enum('ST-EVD', required=False)
  # Coherent processing interval length (pulses).  Defaults to 32.
  cpi_length: int(min=2, required=False)
  # Number of subdivisions in range.  Defaults to 1.
  num_range_blocks: int(min=1, required=False)
  # Maximum allowable number of emitters can be detected and suppressed per CPI.
  # ST-EVD would ignore emitters exceeding this limit. This number should be
  # less than cpi_length. Defaults to 16.
  max_emitters: int(min=0, required=False)
  # Number of large value outliers to be trimmed in slow-time minimum Eigenvalues.
  num_max_trim: int(min=0, required=False)
  # Number of small value outliers to be trimmed in slow-time minimum Eigenvalues.
  num_min_trim: int(min=0, required=False)
  # A detection error (miss) happens when a maximum power RFI emitter
  # contaminates multiple consecutive CPIs, resulting in a flat maximum
  # Eigenvalue slope in slow time. Hence the standard deviation (STD) of
  # multiple dominant EVs across slow time defined by this parameter are
  # compared. The one with the maximum STD is used for RFI Eigenvalue first
  # difference computation.
  max_num_rfi_ev: int(min=1, required=False)
  # Number of slow-time CPIs grouped together for determining and applying a
  # common EV slope threshold.
  num_cpi_per_threshold_block: int(min=2, required=False)
  # Parameters used to adaptively determine RFI eigenvalue difference thresholds
  threshold_hyperparameters: include('rfi_threshold_options', required=False)

rfi_threshold_options:
    # The computed sigma ratio of maximum and minimum Eigenvalue
    # first differences. It is a dimensionless figure of merit. Larger value
    # of x indicates higher likelihood of RFI presence.
    x: list(num(min=0), min=2, required=False)
    # Estimated range of number of sigmas of the first difference of
    # minimum Eigenvalues across threshold block as a function of input x,
    # e.g., smaller x results in larger value of y, therefore relaxing the
    # final threshold. The values of x outside of the defined range of y are
    # extrapolated.
    y: list(num(min=0), min=2, required=False)

qa_options:
  # For descriptions of all QA parameters, see template runconfig (in `defaults` directory)
  workflows: include('workflows_options', required=False)
  qa_reports: include('qa_reports_options', required=False)
  absolute_radiometric_calibration: include('absolute_radiometric_calibration_options', required=False)
  noise_estimation: include('noise_estimation_options', required=False)
  point_target_analyzer: include('point_target_analyzer_options', required=False)

# `workflows` determines whether or not to run each part of QA.
# By default, they are all True.
workflows_options:
  validate: bool(required=False)
  qa_reports: bool(required=False)
  absolute_radiometric_calibration: bool(required=False)
  noise_estimation: bool(required=False)
  point_target_analyzer: bool(required=False)

qa_reports_options:
  backscatter_img:
    linear_units: bool(required=False)
    nlooks_freqa: list(int(min=1), min=2, max=2, required=False)
    nlooks_freqb: list(int(min=1), min=2, max=2, required=False)
    longest_side_max: int(min=1, required=False)
    percentile_for_clipping: list(num(min=0.0, max=100.0), min=2, max=2, required=False)
    gamma: num(min=0.0, required=False)
    tile_shape: list(int(min=-1), min=2, max=2, required=False)
  histogram:
    decimation_ratio: list(int(min=1), min=2, max=2, required=False)
    backscatter_histogram_bin_edges_range: list(num(), min=2, max=2, required=False)
    phs_in_radians: bool(required=False)
    tile_shape: list(int(min=-1), min=2, max=2, required=False)

absolute_radiometric_calibration_options:
  freq: enum('A', 'B', required=False)
  pol: enum('HH', 'VV', 'HV', 'VH', required=False)
  nchip: int(min=1, required=False)
  upsample: int(min=1, required=False)
  peak_find_domain: enum('time', 'freq', required=False)
  nfit: int(min=3, required=False)
  power_method: enum('box', 'integrated', required=False)
  pthresh: num(required=False)

noise_estimation_options:
  freq_group: enum('A', 'B', required=True)
  pol: enum('HH', 'HV', 'VH', 'VV', 'LH', 'LV', 'RH', 'RV', required=True)
  rng_start: list(int(min=0), min=1, required=False)
  rng_stop: list(int(min=0), min=1, required=False)
  algorithm: enum('avg', 'evd', required=False)
  cpi: int(min=1, required=False)

point_target_analyzer_options:
  freq_group: enum('A', 'B', required=True)
  pol: enum('HH', 'HV', 'VH', 'VV', 'LH', 'LV', 'RH', 'RV', required=True)
  predict_null: bool(required=False)
  num_sidelobes: int(min=1, required=False)
  nov: int(min=1, required=False)
  chipsize: int(min=1, required=False)
  shift_domain: enum('time', 'frequency', required=False)
