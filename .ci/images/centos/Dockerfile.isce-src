FROM nisar/dev:latest

# Set an encoding to make things work smoothly.
ENV LANG en_US.UTF-8

# Set pyre source
ENV PYRE_ORG rtburns-jpl
ENV PYRE_CONFIG_ORG aivazis
ENV PYRE_REPO https://github.com/${PYRE_ORG}/pyre.git
ENV PYRE_CONFIG_REPO https://github.com/${PYRE_CONFIG_ORG}/config.git

# Set ISCE repo
ENV ISCE_ORG ericmg
ENV ISCE_REPO github-fn.jpl.nasa.gov/${ISCE_ORG}/isce.git

# install tools for RPM generation
RUN set -ex \
 && sudo yum update -y \
 && sudo yum install -y \
      make ruby-devel rpm-build rubygems \
 && sudo gem install --no-ri --no-rdoc fpm

# install pyre requirements and write pyre build configs
COPY isceCI/images/centos/requirements.txt.pyre /tmp/requirements.txt
RUN set -ex \
 && source /opt/docker/bin/entrypoint_source \
 # If ISCE eventually needs pyre dependencies defined in the
 # requirements.txt.pyre, this should be moved to Dockerfile.dev.
 # Keeping this here for now to keep final ISCE docker images small.
 && sudo conda install --yes --file /tmp/requirements.txt

# add latest pyre repos version metadata to invalidate cache
ADD https://api.github.com/repos/${PYRE_ORG}/pyre/git/refs/heads/master pyre_version.json
ADD https://api.github.com/repos/${PYRE_CONFIG_ORG}/config/git/refs/heads/master pyre_config_version.json

# build pyre
RUN set -ex \
 && source /opt/docker/bin/entrypoint_source \
 && mkdir tmp \
 && cd tmp \
 && git clone $PYRE_REPO \
 && cd pyre \
 && git clone $PYRE_CONFIG_REPO \
 && export \
    PYTHON=python3 \
    PYTHON_INCDIR=$(python3 -c "import sysconfig; print(sysconfig.get_paths()['include'])") \
    PYTHON_LIBDIR=$(python3 -c "import sysconfig; print(sysconfig.get_config_vars()['LIBDIR'])") \
    PYTHON_LIB=$(python3 -c "import sysconfig; print(':' + sysconfig.get_config_vars()['LDLIBRARY'])") \
 && sudo python3 ~/tmp/pyre/config/make/mm.py --prefix=/opt/pyre build

# install doxygen and sphinx for doc generation;
# install valgrind for memory leak check
RUN set -ex \
  && source /opt/docker/bin/entrypoint_source \
  && sudo yum install -y doxygen doxygen-latex texlive texlive-*.noarch \
       ghostscript graphviz valgrind \
  && sudo conda install --yes sphinx \
  && mkdir -p /home/conda/texmf/tex/latex/commonstuff \
  && wget http://mirrors.ctan.org/macros/latex/contrib/anyfontsize/anyfontsize.sty -P /home/conda/texmf/tex/latex/commonstuff 

# install cppcheck for C++ code analysis
RUN set -ex \
  && source /opt/docker/bin/entrypoint_source \
  && wget -q --no-check-certificate -O ~/tmp/cppcheck-1.87.tar.gz https://github.com/danmar/cppcheck/archive/1.87.tar.gz \
  && tar -zxf ~/tmp/cppcheck-1.87.tar.gz -C ~/tmp \
  && cd ~/tmp/cppcheck-1.87 \
  && make SRCDIR=build CFGDIR=cfg HAVE_RULES=yes CXXFLAGS="-O2 -DNDEBUG -Wall -Wno-sign-compare -Wno-unused-function" 

# copy repo
COPY . isce

# build ISCE
RUN set -ex \
 && source /opt/docker/bin/entrypoint_source \
 && cd ~ \
 && mkdir build \
 && mkdir build/valgrind \
 && cd build \
 && cmake -DCMAKE_INSTALL_PREFIX:PATH=/opt/isce -DWITH_CUDA=ON -DWITH_DOC=ON\
      -DMEMORYCHECK_COMMAND_OPTIONS="--trace-children=yes --leak-check=full --dsymutil=yes --track-origins=yes --xml=yes --xml-file=/home/conda/build/valgrind/memcheck.%p.xml" \
      -DCMAKE_CUDA_FLAGS="-arch=sm_37" \
      -DCMAKE_BUILD_TYPE=Debug -DBUILD_SHARED_LIBS=true ../isce \
 && make -j`nproc` VERBOSE=1 \
 && ~/tmp/cppcheck-1.87/cppcheck --std=c++14 --enable=all --inconclusive --force --inline-suppr --xml --xml-version=2 /home/conda/isce/lib 2> cppcheck.xml 
